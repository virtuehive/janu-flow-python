use async_trait::async_trait;
use pyo3::{prelude::*, types::PyModule};
use std::convert::TryFrom;
use std::fs;
use std::path::Path;
use janu_flow::async_std::sync::Arc;
use janu_flow::janu_flow_derive::ZFState;
use janu_flow::Configuration;
use janu_flow::{DataMessage, Node, Sink, State, ZFError, ZFResult};
use janu_flow_python_types::into_py;
use janu_flow_python_types::Context as PyContext;
use janu_flow_python_types::DataMessage as PyDataMessage;

#[derive(ZFState, Clone)]
struct PythonState {
    pub module: Arc<PyObject>,
    pub py_state: Arc<PyObject>,
}
unsafe impl Send for PythonState {}
unsafe impl Sync for PythonState {}

impl std::fmt::Debug for PythonState {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("PythonState").finish()
    }
}

#[derive(Debug)]
struct PySink;

#[async_trait]
impl Sink for PySink {
    async fn run(
        &self,
        ctx: &mut janu_flow::Context,
        state: &mut State,
        input: DataMessage,
    ) -> ZFResult<()> {
        let gil = Python::acquire_gil();
        let py = gil.python();
        let current_state = state.try_get::<PythonState>()?;
        let sink_class = current_state.module.as_ref().clone();

        let py_ctx = PyContext::from(ctx);
        let py_data = PyDataMessage::try_from(input)?;

        sink_class
            .call_method1(
                py,
                "run",
                (
                    sink_class.clone(),
                    py_ctx,
                    current_state.py_state.as_ref().clone(),
                    py_data,
                ),
            )
            .map_err(|e| ZFError::InvalidData(e.to_string()))?;
        Ok(())
    }
}

impl Node for PySink {
    fn initialize(&self, configuration: &Option<Configuration>) -> ZFResult<State> {
        pyo3::prepare_freethreaded_python();
        let gil = Python::acquire_gil();
        let py = gil.python();
        match configuration {
            Some(configuration) => {
                let script_file_path = Path::new(
                    configuration["python-script"]
                        .as_str()
                        .ok_or(ZFError::InvalidState)?,
                );
                let mut config = configuration.clone();

                config["python-script"].take();
                let py_config = config["configuration"].take();
                let py_config = into_py(py, py_config);

                let code = read_file(script_file_path);
                let module = PyModule::from_code(py, &code, "sink.py", "sink")
                    .map_err(|e| ZFError::InvalidData(e.to_string()))?;

                let sink_class: PyObject = module
                    .call_method0("register")
                    .map_err(|e| ZFError::InvalidData(e.to_string()))?
                    .into();

                let state: PyObject = sink_class
                    .call_method1(py, "initialize", (sink_class.clone(), py_config))
                    .map_err(|e| ZFError::InvalidData(e.to_string()))?
                    .into();

                Ok(State::from(PythonState {
                    module: Arc::new(sink_class),
                    py_state: Arc::new(state),
                }))
            }
            None => Err(ZFError::InvalidState),
        }
    }

    fn finalize(&self, _state: &mut State) -> ZFResult<()> {
        Ok(())
    }
}

// Also generated by macro
janu_flow::export_sink!(register);

fn register() -> ZFResult<Arc<dyn Sink>> {
    Ok(Arc::new(PySink) as Arc<dyn Sink>)
}

fn read_file(path: &Path) -> String {
    fs::read_to_string(path).unwrap()
}
